
avr-programming-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c7  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051a  00000000  00000000  000007bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b6  00000000  00000000  00000cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f3  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e0       	ldi	r30, 0x06	; 6
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	3d d0       	rcall	.+122    	; 0xc4 <main>
  4a:	5b c0       	rjmp	.+182    	; 0x102 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <d_eight>:
	// E1
	PORTD &= ~(1 << PD7);
	// F1
	PORTC &= ~(1 << PC2);
	// G1
	PORTC &= ~(1 << PC4);
  4e:	81 30       	cpi	r24, 0x01	; 1
  50:	91 05       	cpc	r25, r1
  52:	61 f4       	brne	.+24     	; 0x6c <d_eight+0x1e>
  54:	ad 98       	cbi	0x15, 5	; 21
  56:	c7 98       	cbi	0x18, 7	; 24
  58:	93 98       	cbi	0x12, 3	; 18
  5a:	c6 9a       	sbi	0x18, 6	; 24
  5c:	ab 9a       	sbi	0x15, 3	; 21
  5e:	a9 9a       	sbi	0x15, 1	; 21
  60:	92 9a       	sbi	0x12, 2	; 18
  62:	c0 9a       	sbi	0x18, 0	; 24
  64:	97 9a       	sbi	0x12, 7	; 18
  66:	aa 9a       	sbi	0x15, 2	; 21
  68:	ac 9a       	sbi	0x15, 4	; 21
  6a:	1e c0       	rjmp	.+60     	; 0xa8 <d_eight+0x5a>
  6c:	82 30       	cpi	r24, 0x02	; 2
  6e:	91 05       	cpc	r25, r1
  70:	61 f4       	brne	.+24     	; 0x8a <d_eight+0x3c>
  72:	ad 98       	cbi	0x15, 5	; 21
  74:	93 98       	cbi	0x12, 3	; 18
  76:	c6 98       	cbi	0x18, 6	; 24
  78:	c7 9a       	sbi	0x18, 7	; 24
  7a:	c2 9a       	sbi	0x18, 2	; 24
  7c:	91 9a       	sbi	0x12, 1	; 18
  7e:	94 9a       	sbi	0x12, 4	; 18
  80:	95 9a       	sbi	0x12, 5	; 18
  82:	96 9a       	sbi	0x12, 6	; 18
  84:	90 9a       	sbi	0x12, 0	; 18
  86:	a8 9a       	sbi	0x15, 0	; 21
  88:	08 95       	ret
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	91 05       	cpc	r25, r1
  8e:	61 f4       	brne	.+24     	; 0xa8 <d_eight+0x5a>
  90:	ad 98       	cbi	0x15, 5	; 21
  92:	c7 98       	cbi	0x18, 7	; 24
  94:	96 98       	cbi	0x12, 6	; 18
  96:	c3 9a       	sbi	0x18, 3	; 24
  98:	ab 9a       	sbi	0x15, 3	; 21
  9a:	a9 9a       	sbi	0x15, 1	; 21
  9c:	92 9a       	sbi	0x12, 2	; 18
  9e:	c0 9a       	sbi	0x18, 0	; 24
  a0:	97 9a       	sbi	0x12, 7	; 18
  a2:	aa 9a       	sbi	0x15, 2	; 21
  a4:	ac 9a       	sbi	0x15, 4	; 21
  a6:	08 95       	ret
  a8:	04 97       	sbiw	r24, 0x04	; 4
  aa:	59 f4       	brne	.+22     	; 0xc2 <d_eight+0x74>
  ac:	c7 98       	cbi	0x18, 7	; 24
  ae:	93 98       	cbi	0x12, 3	; 18
  b0:	c6 98       	cbi	0x18, 6	; 24
  b2:	ad 9a       	sbi	0x15, 5	; 21
  b4:	c2 9a       	sbi	0x18, 2	; 24
  b6:	91 9a       	sbi	0x12, 1	; 18
  b8:	94 9a       	sbi	0x12, 4	; 18
  ba:	95 9a       	sbi	0x12, 5	; 18
  bc:	96 9a       	sbi	0x12, 6	; 18
  be:	90 9a       	sbi	0x12, 0	; 18
  c0:	a8 9a       	sbi	0x15, 0	; 21
  c2:	08 95       	ret

000000c4 <main>:
}

int main(void)
{
	/* Ausgänge setzen. */
	DDRC |= (1 << PC5); // 1. Modul 2. Ziffer
  c4:	a5 9a       	sbi	0x14, 5	; 20
	DDRB |= (1 << PB7); // 2. Modul 2. Ziffer
  c6:	bf 9a       	sbi	0x17, 7	; 23
	DDRD |= (1 << PD3); // 1. Modul 1. Ziffer
  c8:	8b 9a       	sbi	0x11, 3	; 17
	DDRB |= (1 << PB6); // 2. Modul 1. Ziffer
  ca:	be 9a       	sbi	0x17, 6	; 23

	DDRB |= (1 << PB2); // A2
  cc:	ba 9a       	sbi	0x17, 2	; 23
	DDRD |= (1 << PD1); // B2
  ce:	89 9a       	sbi	0x11, 1	; 17
	DDRD |= (1 << PD4); // C2
  d0:	8c 9a       	sbi	0x11, 4	; 17
	DDRD |= (1 << PD5); // D2
  d2:	8d 9a       	sbi	0x11, 5	; 17
	DDRD |= (1 << PD6); // E2
  d4:	8e 9a       	sbi	0x11, 6	; 17
	DDRD |= (1 << PD0); // F2
  d6:	88 9a       	sbi	0x11, 0	; 17
	DDRC |= (1 << PC0); // G2
  d8:	a0 9a       	sbi	0x14, 0	; 20
	
	DDRC |= (1 << PC3); // A1
  da:	a3 9a       	sbi	0x14, 3	; 20
	DDRC |= (1 << PC1); // B1
  dc:	a1 9a       	sbi	0x14, 1	; 20
	DDRD |= (1 << PD2); // C1
  de:	8a 9a       	sbi	0x11, 2	; 17
	DDRB |= (1 << PB0); // D1
  e0:	b8 9a       	sbi	0x17, 0	; 23
	DDRD |= (1 << PD7); // E1
  e2:	8f 9a       	sbi	0x11, 7	; 17
	DDRC |= (1 << PC2); // F1
  e4:	a2 9a       	sbi	0x14, 2	; 20
	DDRC |= (1 << PC4); // G1
  e6:	a4 9a       	sbi	0x14, 4	; 20
	
	while (1)
	{
		//resetModuleOneDigitOne();
		//_delay_ms(500);
		d_eight(1);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	b0 df       	rcall	.-160    	; 0x4e <d_eight>
		d_eight(2);
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	ad df       	rcall	.-166    	; 0x4e <d_eight>
		d_eight(3);
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	aa df       	rcall	.-172    	; 0x4e <d_eight>
		d_eight(4);
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a7 df       	rcall	.-178    	; 0x4e <d_eight>
 100:	f3 cf       	rjmp	.-26     	; 0xe8 <main+0x24>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
